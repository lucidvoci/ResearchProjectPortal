#! /usr/bin/python

"""
This module should be a programatical mirror of rrs database data model - classes
are tables, instance variables are attributes, class variables are enums of entity
types.

THIS FILE IS GENERATED BY rrslib.db.modelcreator.py. Any mistakes have to be fixed
there.
"""

import time
import datetime
import re


__date__ = "$Mon Feb 21 00:57:42 2011$"
__tables__ = ('rank_meta', 'event_type', 'reference', 'file_meta', 'text',
'citation', 'event_meta', 'module', 'topic', 'tag', 'project_type',
'award_meta', 'file', 'event', 'contact_meta', 'presentation_meta', 'network',
'keyword_meta', 'publication_series__meta', 'publication_type',
'organization_name', 'citation_meta', 'organization_name__meta',
'publication_section__meta', 'location', 'text_meta', 'person_name__meta',
'person_meta', 'presentation', 'topic_meta', 'publication_series',
'location_meta', 'person_name', 'organization_meta', 'event_name', 'award',
'publication_section', 'geoplanet', 'event_name__meta', 'rank', 'url_type',
'tag_meta', 'event_series__meta', 'location_type', 'network_meta',
'publication', 'keyword', 'language', 'url', 'organization_type',
'publication_meta', 'event_series', 'project_meta', 'project', 'person',
'contact', 'url_meta', 'reference_meta', 'organization')
__modulename__ = "model"
__author__ = "RRSModelCreator"
__dbversion__ = "RRSDB_09"



class RRSDatabaseEntityError(Exception):
    pass

class RRSDatabaseAttributeError(AttributeError):
    pass

class RRSDatabaseValueError(ValueError):
    pass


#-------------------------------------------------------------------------------
# End of classes RRSDatabaseError
#-------------------------------------------------------------------------------


class RRSDatabaseEntityChecker:
    """
    The methods checks if attribute in table gets the right type of value. For example:
    If event has an attribute "location" (in fact in database it has only location_id FK)
    location has to be type of RRSLocation.
    """


    @classmethod
    def check_credibility(self, value):
        if isinstance(value, int) and value >= 0 and value <= 100: return
        if value is None: return
        raise RRSDatabaseValueError("Credibility has to be type integer in range 0 - 100")

    @classmethod
    def check_link(self, value):
        if value is None: return
        if not isinstance(value, (str, unicode)):
            raise RRSDatabaseValueError("Link (URL) has to be type string")
        # XXX Uniform Resource Identifier (URI) regex specified in RFC 2396:
        #  ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
        # which of them we have to use?
        rfc2396_url = '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$'
        if not re.match(rfc2396_url, value):
            raise RRSDatabaseValueError("Link format doesn't agree with RFC 2396 specification")

#-------------------------------------------------------------------------------
# End of classes RRSDatabaseEntityChecker
#-------------------------------------------------------------------------------




# parent class of all database tables (entities)
class _RRSDatabaseEntity(object):
    """
    _RRSDatabaseEntity is top-level class, it's parent of all database-entity classes.
    Implements also method __str__ which is common for all descendants.
    """

    lev = 0 # Indent storage. Needed when __str__() method is called.

    def __init__(self, id):
        self.id = None
        self.credibility = None
        self.module = None

        # primary key of every entity (table) in database
        self.set('id', id)
        self.set('credibility', None)
        self.set('module', None)


    def get(self, attr):
        """
        Returns requested attribute. If attribute doesn't exist, throws Exception.
        """
        return getattr(self, attr)


    def set(self, attr, val, strict=True):
        """
        Assigns value $val to attribute $attr. Throws RRSDatabaseValueError if
        trying to set inappropriate value (wrong format) and RRSDatabaseEntityError
        when trying to set wrong entity (in juncion table).
        This way we try to avoid setting malformated data into the database.
        Method can also avoid direct recursion (inserting object to himself), but
        cannot recognize indirect recursion like A.insert(B); B.insert(A).
        """
        if val is None:
            return
        if isinstance(val, basestring):
            if not len(val): return False
            s = re.sub("[\n\t\r ]+", "", val)
            if not len(s): return False
        if val is self:
            raise RRSDatabaseValueError("Avoid infinite recursion: Cannot insert itself as a value.")

        # Check type. If it is some new attribute, the type cannot be determined
        if attr in self.__types__:
            if self.__types__[attr] is not _UnknownType:
                self._check_type(attr, val, self.__types__[attr])
        else:
            try:
                if type(self.__dict__[attr]) is not list:
                    self.__types__[attr] = _UnknownType
            except KeyError, e:
                if strict:
                    cls = str(self.__class__).split("'")[1].split(".")[-1]
                    raise KeyError("Object %s has no attribute %s." % (cls, e))
                else:
                    self.__types__[attr] = _UnknownType
                    # no semanics checking needed, so insert value into object
                    setattr(self, attr, val)
                    return

        # Check semantics
        self._check_semantics(attr, val)

        # Insert
        if type(self.__dict__[attr]) == list:
            if not isinstance(val, _RRSDbEntityRelationship):
                raise RRSDatabaseValueError("Relationship between entities has to" \
                "be represented by any instance of subclass of _RRSDbEntityRelationship")
            val._parent = self # set pointer to parent element
            self.__dict__[attr].append(val)
        else:
            setattr(self, attr, val)


    def isset(self, attr):
        """
        This function returns True if attribute is set and not None. Else retuns
        False.
        """
        try:
            _var = getattr(self, attr)
        except:
            return False
        if isinstance(_var, list):
            return len(_var) > 0
        return _var is not None


    def _check_type(self, attr, val, _type):
        """
        Checks attribute for correct value type.
        """
        if not isinstance(val, _type):
            raise RRSDatabaseValueError("Attribute " + attr + " has to be type " \
            + str(_type))


    def _check_semantics(self, attr, val):
        """
        Iterates over methods in checker and tests attribute for correct value type.
        Some of checking methods are heuristic.
        """
        for method in dir(RRSDatabaseEntityChecker):
            if callable(getattr(RRSDatabaseEntityChecker, method)):
                if method.replace("check_", "") == attr.split('_')[0]:
                    getattr(RRSDatabaseEntityChecker, method)(val)
                    break


    def _deleted(self, obj, parent, attr):
        if obj.empty(exc=['id']):
            if parent is None and attr is None:
                return False # do nothing, its the top-level object
            else:
                assert parent is not None
                assert attr is not None
                if type(parent[attr]) is list:
                    # iterate over all relationship objects and delete the right
                    for i, rel_obj in enumerate(parent[attr]):
                        for ent in rel_obj.get_entities():
                            if ent is obj:
                                del parent[attr][i]
                                return True
                else:
                    # it is normal
                    setattr(parent, attr, None)
                    return True
            return True
        return False


    def _compile(self, parent, attr, c):
        if parent is None or attr is None:
            # the first level
            obj = self
        else:
            obj = parent[attr]
        # is this a relationship?
        if isinstance(obj, list):
            for rel_obj in obj:
                if not isinstance(rel_obj, _RRSDbEntityRelationship):
                    # this is maybe list containing some other data, which were
                    # added with strict=False
                    continue
                for e in rel_obj.get_entities():
                    if self._deleted(e, parent, attr):
                        continue
                    if e in c: return
                    c.append(e)
                    for item in e:
                        self._compile(e, item, c)
        # base entity (instance o subclass of RRSDatabseEntity
        elif isinstance(obj, _RRSDatabaseEntity):
            if self._deleted(obj, parent, attr):
                return
            if obj in c: return
            c.append(obj)
            for item in obj:
                self._compile(obj, item, c)


    def compile(self):
        """
        Compile the entity tree. It means, all empty objects are removed, all
        relationship are checked for cyclic dependencies - the graph has to be
        acyclic (tree).
        If some cycle found, raises RRSDatabaseEntityError exception.
        @returns count of compiled objects
        """
        c = [] # container for objects. Find out if there is any cyclic dep.
        self._compile(None, None, c)
        return len(c)


    def _str_helper(self, attr, c):
        if attr in c:
            return "None"
        if isinstance(attr, (int, str, complex, float, list)):
            return str(attr)
        if isinstance(attr, unicode):
            return attr.encode('ascii', 'ignore')
        if attr is None:
            return "None"
        c.append(attr)
        s = "<" + __modulename__ + "." + str(attr.__class__).split("'")[1].split(".")[-1] + "("
        l = len(s)
        _RRSDatabaseEntity.lev += l
        # looping over all variables in instance
        for var in attr.__dict__:
            # get value of variable
            att = attr.__dict__[var]
            #att = getattr(self, var)
            # attribute mustn't be callable and mustn't be in __underscored__ fashion
            if not callable(att) and not var.startswith("__") and not var.endswith("__") \
                and var not in ('event_types', 'publication_types', 'url_types', \
                'organization_types', 'lev', 'location_types', 'project_types', 'modules'):
                # if attribute is string, arr quotes to make it better readable
                conn = ""
                if isinstance(att, basestring): conn = '"'
                # add attribute to representation of object
                s += (var + "=" + conn + self._str_helper(att, c)) + conn + ", \n" + _RRSDatabaseEntity.lev * " "
        s = s[0:-2]
        _RRSDatabaseEntity.lev -= (l)
        return s + "), instance ID=" + str(id(self)) + ">"


    def __str__(self):
        """
        Returns textual representation of database entity if format:
        <rrsdbdata._RRSDatabaseEntity(id=None), instance ID=3075444236>
        this method inherite all subclasses and there's not need to override it.
        """
        c = []
        return self._str_helper(self, c)


    def get_own_attrs(self):
        """
        Returns dictionary mapping own attributes to non-null values. Own
        attributes are non-FK columns of table. The non-null value is ment to be
        value != None.
        """
        d = {}
        for attr in self.__types__:
            if attr in ("module", "credibility"): continue
            if self.__types__[attr] in (int, float, basestring, str, unicode,
                                        RRSDateTime, RRSEmail):
                if self.isset(attr):
                    d[attr] = self.get(attr)
        return d


    def empty(self, exc=[]):
        """
        Returns true if no value assigned to object, thus it's interpreted as empty.
        @param exc - all except these attributes will be counted to empty state
                     If an attribute in exc-list will be present, it's counted
                     as non-existent.
        """
        attrs = self.get_own_attrs()
        return not set(attrs.keys()).difference(set(exc))


    # Container emulation

    def __getitem__(self, key):
        if not isinstance(key, basestring):
            raise TypeError("Key is of an inappropriate type. Has to be type string or unicode.")
        return self.get(key)


    def __setitem__(self, key, value):
        self.set(key, value)


    def __contains__(self, item):
        return self.isset(item)


    def __iter__(self):
        for attr in self.__dict__:
            if attr in ("_table_name", "__types__", "lev"):
                continue
            yield attr


#-------------------------------------------------------------------------------
# End of class _RRSDatabaseEntity
#-------------------------------------------------------------------------------


class _UnknownType(object):
    def __str__(self):
        return "Unknown type"

    def __repr__(self):
        return "Unknown type"

    def __setattr__(self, attr, value):
        raise Exception("Cannot set attribute to unknown type")

    def __getattr__(self, attr):
        raise Exception("Cannot get attribute from unknown type")

#-------------------------------------------------------------------------------
# End of class _UnknownType
#-------------------------------------------------------------------------------


############################ non-database entities #############################
# these arent inherited from _RRSDatabaseEntity, but they are implemented for
# typechecking

class RRSDateTime(object):
    """
    There was a need to have universal datetime object with possibility to be
    empty and half-specified (which neither time_struct, nor datetime.date or
    datetime.datetime support). Also we need often to get timestamp - usual library
    classes in module datetime doesn't provide methods for achieve it.

    So here is class implemented to acomplish these needs.
    """
    # FIXME check days in month - where is 30 and where 31 days (in February 28,29).

    def __init__(self, year=None, month=None, day=None, hour=None, minute=None, \
                       second=None):
        self._content = {'year': None, 'month': None, 'day': None, \
                         'hour': None, 'minute': None, 'second': None}
        self.set('year', year)
        self.set('month', month)
        self.set('day', day)
        self.set('hour', hour)
        self.set('minute', minute)
        self.set('second', second)


    def get(self, attr):
        """
        Get time parameter. If asking for invalid parameter, Exception is thrown.
        """
        return self._content[attr]


    def set(self, attr, val):
        # there can be inserted None too
        if val is None and attr in self._content:
            self._content[attr] = val
            return
        # attributes has to be type integer
        if not isinstance(val, int):
            raise RRSDatabaseValueError(str(attr) + " has to be type integer or NoneType")

        # checking ranges
        if attr == 'year':
            if val > 2100 or val < 1900:
                raise RRSDatabaseValueError("year has to be integer in range 1900-2100")
        elif attr == 'month':
            if val > 12 or val < 1:
                raise RRSDatabaseValueError("month has to be integer in range 1-12")
        elif attr == 'day':
            if val > 31 or val < 1:
                raise RRSDatabaseValueError("day has to be integer in range 1-31")
        elif attr == 'hour':
            if val > 23 or val < 0:
                raise RRSDatabaseValueError("hour has to be integer in range 0-23")
        elif attr == 'minute' or attr == 'second':
            if val > 59 or val < 0:
                raise RRSDatabaseValueError(str(attr) + " has to be integer in range 0-59")
        else:
            raise RRSDatabaseAttributeError("Attribute for RRSDateTime not appropriate: " + str(attr))

        # set value to the content dict
        self._content[attr] = val


    def parse_isoformat(self, val):
        """
        Parses date in ISO 8601 format and stores into object.
        """
        date, _time = None, None
        if ' ' in val:
            (date, _time) = val.split(' ')
        elif 'T' in val:
            (date, _time) = val.split('T')
        elif '-' in val: date = val
        elif ':' in val: _time = val
        else: date = val
        if date is not None:
            sp = date.split('-')
            self.set('year', int(sp[0]))
            if len(sp) > 1:
                self.set('month', int(sp[1]))
            if len(sp) > 2:
                self.set('day', int(sp[2]))
        if _time is not None:
            sp = _time.split(':')
            h, m, s = 0,0,0
            if len(sp) == 3:
                (h, m, s) = sp
            elif len(sp) == 2:
                (h, m) = sp
            elif len(sp) == 1:
                 h = sp[0]
            self.set('hour', int(h))
            self.set('minute', int(m))
            self.set('second', int(s))
            


    def parse_timestamp(self, timestamp):
        """
        Parses date from timestamp and stores into object.
        """
        dd = datetime.datetime.fromtimestamp(timestamp)
        self.set('year', dd.year)
        self.set('month', dd.month)
        self.set('day', dd.day)
        self.set('hour', dd.hour)
        self.set('minute', dd.minute)
        self.set('second', dd.second)


    def now(self):
        """
        Set object's date and time as NOW.
        """
        self.parse_timestamp(time.time())


    def timestamp(self):
        """
        Method timestamp() returns time in second since epoch (1.1.1970). If
        year is below 1970, method returns 0.0.

        If some of params are missing, all lower-level params are ignored.
        Example (day is missing):
        \>>> t = RRSDateTime(year=1971, month=2)
        \>>> print t.timestamp()
        34210800.0
        \>>> t.set('hour', 12)
        \>>> print t.timestamp()
        34210800.0
        """
        def get_tstp(y, mo, d, h, mi, s):
            ts = time.strptime(str(y) + '-' + str(mo) + '-' + str(d) + 'T' + str(h) + ':' + \
                               str(mi) + ':' + str(s), '%Y-%m-%dT%H:%M:%S')
            return time.mktime(ts)
        y = 1970
        mo = 1
        d = 1
        h = 0
        mi = 0
        s = 0
        # syntacic hack - 'while' stmt is not important, but 'break' makes there goto stmt
        while 1:
            if self._content['year'] is None: break
            y = self._content['year']
            if self._content['month'] is None: break
            mo = self._content['month']
            if self._content['day'] is None: break
            d = self._content['day']
            if self._content['hour'] is None: break
            h = self._content['hour']
            if self._content['minute'] is None: break
            mi = self._content['minute']
            if self._content['second'] is None: break
            s = self._content['second']
            break
        if y < 1970: return 0.0
        return get_tstp(y, mo, d, h, mi, s)


    def date_isoformat(self):
        """
        This format is an international standard ISO 8601 for date, which describes
        date in order year-month-day.
        """
        s = ''
        for att in ('year', 'month', 'day'):
            if self._content[att] is None:
                val = ''
                if att == 'year': val = '1970'
                else: val = '1'
                s += val + '-'
            else:
                s += str(self._content[att]) + '-'
        return s.rstrip("-")


    def time_isoformat(self):
        """
        This format is an international standard ISO 8601 for time, which describes
        time in order hour:minute:second.milisecond.
        """
        s = ''
        for att in ('hour', 'minute', 'second'):
            if self._content[att] is None:
                s += '00' + ':'
            else:
                s += str(self._content[att]) + ':'
        return s.rstrip(":") + ".0"



    def datetime_isoformat(self):
        """
        This format is an international standard ISO 8601, which describes date
        in order year-month-day hour:minute:second.milisecond.

        This method returns ISO 8601 format, but if we do not have enought informations,
        i.e. day is missing, method returns only year-month. All params behind
        (hour, minute, second) are siply ignored, because if some higher-level
        param is missing, lower-level informations becomes useless.
        """
        date = self.date_isoformat()
        #if not re.search("\d{4}\-\d{1,2}\-\d{1,2}", date):
        #    return date
        time = self.time_isoformat()
        #if not re.search("\d{1,2}:\d{1,2}:\d{1,2}", time):
        #    return date
        return date + ' ' + time


    def __str__(self):
        return self.datetime_isoformat()


    def __unicode__(self):
        return unicode(self.datetime_isoformat())

#-------------------------------------------------------------------------------
# End of class RRSDateTime
#-------------------------------------------------------------------------------


class RRSEmail(object):
    """
    RRSEmail was created just for typechecking of inserted e-mail like data.
    There is strong regular expression control, if e-mail address is in the
    right format and agrees with RFC 5322 specification.
    """
    def __init__(self, email=None):
        self._localpart = None
        self._domain = None
        self.set_email(email)


    def set_email(self, mailstr):
        if mailstr is not None:
            if re.search('^[a-zA-Z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&\''\
            '*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+('\
            '?:[a-zA-Z]{2}|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|'\
            'mobi|museum|name|net|org|pro|tel|travel)', mailstr):
                self._localpart, self._domain = mailstr.split('@')
            else:
                raise RRSDatabaseValueError("Wrong e-mail format." + str(mailstr))

    def get_localpart(self):
        return self._localpart


    def get_domain(self):
        return self._domain


    def __str__(self):
        return self._localpart + "@" + self._domain

#-------------------------------------------------------------------------------
# End of class RRSEmail
#-------------------------------------------------------------------------------


class _RRSDbEntityRelationship(object):
    def __init__(self):
        self._entities = []
        self._parent = None


    def set_attribute(self, name, val):
        setattr(self, name, val)


    def set_entity(self, val):
        if type(val) in self.__types__["__entities__"]:
            self._entities.append(val)
        else:
            obj = repr(val).split(".")[1].split(" ")[0] + " object"
            this = repr(self).split(".")[1].split(" ")[0] + " object"
            raise RRSDatabaseEntityError("Cannot set " + obj + " into " + this)


    def isset(self, attr):
        """
        This function returns True if attribute is set and not None. Else retuns
        False.
        """
        try:
            _var = getattr(self, attr)
        except:
            return False
        if isinstance(_var, list):
            return len(_var) > 0
        return _var is not None


    def get_attribute(self, attr):
        return getattr(self, attr)


    def get_entities(self):
        return self._entities

    # Container emulation

    def __getitem__(self, key):
        if not isinstance(key, basestring):
            raise TypeError("Key is of an inappropriate type. Has to be type string or unicode.")
        return self.get_attribute(key)


    def __setitem__(self, key, value):
        self.set_attribute(key, value)


    def __contains__(self, item):
        return self.isset(item)


    def __iter__(self):
        for attr in self.__dict__:
            if attr in ("_table_name", "__types__", "_parent", "_entities"):
                continue
            yield attr


    def __str__(self):
        s = str(self.__class__).split("'")[1].split(".")[-1] + "\n"
        for e in self._entities:
            s += str(e)
        return s

#-------------------------------------------------------------------------------
# End of class _RRSDbEntityRelationship
#-------------------------------------------------------------------------------


class RRSRelationshipPersonUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSPerson)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonUrl
#-------------------------------------------------------------------------------


class RRSRelationshipEventPresentation(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_pres"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPresentation, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventPresentation
#-------------------------------------------------------------------------------


class RRSRelationshipFileTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFileTag
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSOrganization)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationUrl
#-------------------------------------------------------------------------------


class RRSRelationshipProjectProject_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_proj_proj"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSProject_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipProjectProject_type
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationReference(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_refe"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSReference)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationReference
#-------------------------------------------------------------------------------


class RRSRelationshipTextPublication_section(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j__text__publication_section"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication_section, RRSText)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventPresentation
#-------------------------------------------------------------------------------


class RRSRelationshipProjectKeyword(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_proj_keyw"
    _fake_table = False

    def __init__(self, frequency=None):
        # attributes
        self.frequency = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSKeyword),
        'frequency':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("frequency", frequency)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipProjectKeyword
#-------------------------------------------------------------------------------


class RRSProject_type(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "project_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSProject_type
#-------------------------------------------------------------------------------


class RRSRelationshipKeywordText(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_keyw_text"
    _fake_table = False

    def __init__(self, morpheme=None, text_position_to=None,
            text_position_from=None, generated=None):
        # attributes
        self.morpheme = None
        self.text_position_to = None
        self.text_position_from = None
        self.generated = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSText, RRSKeyword),
        'morpheme':basestring, 'text_position_to':int, 'text_position_from':int,
        'generated':bool}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("morpheme", morpheme)
        self.set_attribute("text_position_to", text_position_to)
        self.set_attribute("text_position_from", text_position_from)
        self.set_attribute("generated", generated)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipKeywordText
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationPublication_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSPublication_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationPublication_type
#-------------------------------------------------------------------------------


class RRSRelationshipEventPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventPublication
#-------------------------------------------------------------------------------


class RRSRelationshipLocationPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_pers"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSLocation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationPerson
#-------------------------------------------------------------------------------


class RRSOrganization(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "organization"

    def __init__(self, title=None, acronym=None, title_normalized=None,
            id=None):
        # attributes
        self.title = None
        self.acronym = None
        self.type = None
        self.parent = None
        self.title_normalized = None
        self.location = None
        self.url = []
        self.event = []
        self.person = []
        self.contact = []
        self.publication_author = []
        self.tag = []
        self.project_participates = []
        self.project_organizes = []
        self.rank = []
        self.organization_name = []
        self.project_grants = []

        # dictionary of variable types
        self.__types__ = {'title':basestring, 'acronym':basestring,
        'type':RRSOrganization_type, 'parent':RRSOrganization,
        'title_normalized':basestring, 'location':RRSLocation, 'id':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("title", title)
        self.set("acronym", acronym)
        self.set("title_normalized", title_normalized)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSOrganization
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationProjectParticipates(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_proj_participates"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSOrganization)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationProjectParticipates
#-------------------------------------------------------------------------------


class RRSEvent_series(_RRSDatabaseEntity):
    """
    Series of events.
    """

    _table_name = "event_series"

    def __init__(self, frequency=None, id=None, last_occurence=None,
            title=None):
        # attributes
        self.frequency = None
        self.last_occurence = None
        self.title = None

        # dictionary of variable types
        self.__types__ = {'frequency':int, 'id':int,
        'last_occurence':RRSDateTime, 'title':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("frequency", frequency)
        self.set("id", id)
        self.set("last_occurence", last_occurence)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSEvent_series
#-------------------------------------------------------------------------------


class RRSLocation_type(_RRSDatabaseEntity):
    """
    Docasna tabulka pro ulozeni lokace. Bude nahrazena geografickou ontologii.
    """

    _table_name = "location_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSLocation_type
#-------------------------------------------------------------------------------


class RRSPerson_name(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "person_name"

    def __init__(self, first_name=None, last_name=None, middle_name=None,
            id=None, full_name=None, original=None):
        # attributes
        self.first_name = None
        self.last_name = None
        self.middle_name = None
        self.full_name = None
        self.original = None
        self.person = []
        self.reference = []

        # dictionary of variable types
        self.__types__ = {'first_name':basestring, 'last_name':basestring,
        'middle_name':basestring, 'id':int, 'full_name':basestring,
        'original':basestring, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("first_name", first_name)
        self.set("last_name", last_name)
        self.set("middle_name", middle_name)
        self.set("id", id)
        self.set("full_name", full_name)
        self.set("original", original)


#-------------------------------------------------------------------------------
# End of class RRSPerson_name
#-------------------------------------------------------------------------------


class RRSRelationshipProjectTopic(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_proj_topi"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSTopic)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipProjectTopic
#-------------------------------------------------------------------------------


class RRSRelationshipEvent_nameEvent(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_even"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSEvent_name, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEvent_nameEvent
#-------------------------------------------------------------------------------


class RRSRelationshipUrlUrl_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_url__url"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSUrl_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipUrlUrl_type
#-------------------------------------------------------------------------------


class RRSRelationshipPresentationTopic(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pres_topi"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTopic, RRSPresentation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPresentationTopic
#-------------------------------------------------------------------------------


class RRSModule(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "module"

    def __init__(self, module_name=None, id=None):
        # attributes
        self.module_name = None

        # dictionary of variable types
        self.__types__ = {'module_name':basestring, 'id':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("module_name", module_name)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSModule
#-------------------------------------------------------------------------------


class RRSTag(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "tag"

    def __init__(self, id=None, title=None):
        # attributes
        self.title = None
        self.keyword = []
        self.citation = []
        self.file = []
        self.person = []
        self.publication = []
        self.location = []
        self.organization = []
        self.event = []
        self.presentation = []
        self.project = []
        self.url = []

        # dictionary of variable types
        self.__types__ = {'id':int, 'title':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSTag
#-------------------------------------------------------------------------------


class RRSRelationshipOrganization_nameOrganization(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_orga"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization_name,
        RRSOrganization)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganization_nameOrganization
#-------------------------------------------------------------------------------


class RRSRelationshipPresentationTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pres_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSPresentation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPresentationTag
#-------------------------------------------------------------------------------


class RRSProject(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "project"

    def __init__(self, status=None, duration_months=None, funding=None,
            title=None, acronym=None, id=None, currency=None, cost=None,
            start_date=None, annotation=None, ref_code=None):
        # attributes
        self.status = None
        self.duration_months = None
        self.funding = None
        self.title = None
        self.acronym = None
        self.type = None
        self.currency = None
        self.organization_grants = None
        self.cost = None
        self.start_date = None
        self.annotation = None
        self.ref_code = None
        self.topic = []
        self.publication = []
        self.person_responsible = []
        self.url = []
        self.keyword = []
        self.file = []
        self.organization_participates = []
        self.organization_organizes = []
        self.person_works = []
        self.tag = []

        # dictionary of variable types
        self.__types__ = {'status':basestring, 'duration_months':int,
        'funding':int, 'title':basestring, 'acronym':basestring,
        'type':RRSProject_type, 'id':int, 'currency':basestring,
        'organization_grants':RRSOrganization, 'cost':float,
        'start_date':RRSDateTime, 'annotation':basestring,
        'ref_code':basestring, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("status", status)
        self.set("duration_months", duration_months)
        self.set("funding", funding)
        self.set("title", title)
        self.set("acronym", acronym)
        self.set("id", id)
        self.set("currency", currency)
        self.set("cost", cost)
        self.set("start_date", start_date)
        self.set("annotation", annotation)
        self.set("ref_code", ref_code)


#-------------------------------------------------------------------------------
# End of class RRSProject
#-------------------------------------------------------------------------------


class RRSRelationshipProjectTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_proj_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSTag)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipProjectTag
#-------------------------------------------------------------------------------


class RRSRelationshipEvent_seriesEvent(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_even"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSEvent_series, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEvent_seriesEvent
#-------------------------------------------------------------------------------


class RRSRelationshipNetworkUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_netw_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSNetwork)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipNetworkUrl
#-------------------------------------------------------------------------------


class RRSLocation(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "location"

    def __init__(self, city=None, name=None, country=None, address=None,
            woeid=None, id=None):
        # attributes
        self.city = None
        self.name = None
        self.type = None
        self.country = None
        self.address = None
        self.woeid = None
        self.rank = []
        self.tag = []
        self.person = []
        self.event = []
        self.organization = []

        # dictionary of variable types
        self.__types__ = {'city':basestring, 'name':basestring,
        'type':RRSLocation_type, 'country':basestring, 'address':basestring,
        'woeid':int, 'id':int, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("city", city)
        self.set("name", name)
        self.set("country", country)
        self.set("address", address)
        self.set("woeid", woeid)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSLocation
#-------------------------------------------------------------------------------


class RRSContact(_RRSDatabaseEntity):
    """
    Contact information like email, jabber, telephone and location. Can be used for person or organization.
    """

    _table_name = "contact"

    def __init__(self, telephone=None, fax=None, id=None, email=None):
        # attributes
        self.telephone = None
        self.fax = None
        self.email = None
        self.person = []
        self.organization = []

        # dictionary of variable types
        self.__types__ = {'telephone':basestring, 'fax':basestring, 'id':int,
        'email':RRSEmail, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("telephone", telephone)
        self.set("fax", fax)
        self.set("id", id)
        self.set("email", email)


#-------------------------------------------------------------------------------
# End of class RRSContact
#-------------------------------------------------------------------------------


class RRSRelationshipPersonPerson_name(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j__person__person_name"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSPerson_name)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonPerson_name
#-------------------------------------------------------------------------------


class RRSRelationshipEventTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventTag
#-------------------------------------------------------------------------------


class RRSRelationshipLocationOrganization(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_orga"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSLocation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationOrganization
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationCitation(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_cita"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSCitation, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationCitation
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSTag)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationTag
#-------------------------------------------------------------------------------


class RRSCitation(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "citation"

    def __init__(self, text_position_to=None, text_position_from=None,
            content=None, reference_page_to=None, reference_page_count=None,
            reference_page_from=None, id=None):
        # attributes
        self.text_position_to = None
        self.publication = None
        self.text_position_from = None
        self.content = None
        self.reference_page_to = None
        self.reference_page_count = None
        self.reference_page_from = None
        self.reference = None
        self.person = []
        self.tag = []

        # dictionary of variable types
        self.__types__ = {'text_position_to':int, 'publication':RRSPublication,
        'text_position_from':int, 'content':basestring, 'reference_page_to':int,
        'reference_page_count':int, 'reference_page_from':int, 'id':int,
        'reference':RRSReference, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("text_position_to", text_position_to)
        self.set("text_position_from", text_position_from)
        self.set("content", content)
        self.set("reference_page_to", reference_page_to)
        self.set("reference_page_count", reference_page_count)
        self.set("reference_page_from", reference_page_from)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSCitation
#-------------------------------------------------------------------------------


class RRSOrganization_type(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "organization_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSOrganization_type
#-------------------------------------------------------------------------------


class RRSNetwork(_RRSDatabaseEntity):
    """
    Socialni site a blogy.
    """

    _table_name = "network"

    def __init__(self, id=None, name=None):
        # attributes
        self.name = None
        self.person = []
        self.url = []

        # dictionary of variable types
        self.__types__ = {'id':int, 'name':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("name", name)


#-------------------------------------------------------------------------------
# End of class RRSNetwork
#-------------------------------------------------------------------------------


class RRSRelationshipPersonPresentationContributes(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_pres_contributes"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSPresentation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonPresentationContributes
#-------------------------------------------------------------------------------


class RRSUrl_type(_RRSDatabaseEntity):
    """
    Types of url. Enumeration.
    """

    _table_name = "url_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSUrl_type
#-------------------------------------------------------------------------------


class RRSRelationshipPublication_seriesPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication_series,
        RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublication_seriesPublication
#-------------------------------------------------------------------------------


class RRSRelationshipContactOrganization(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_cont_orga"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSContact)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipContactOrganization
#-------------------------------------------------------------------------------


class RRSRelationshipEventOrganization(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_orga"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventOrganization
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationUrl
#-------------------------------------------------------------------------------


class RRSRelationshipPerson_nameReference(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j__person_name__reference"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSReference)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPerson_nameReference
#-------------------------------------------------------------------------------


class RRSPublication(_RRSDatabaseEntity):
    """
    [id, type]
    """

    _table_name = "publication"

    def __init__(self, issn=None, isbn=None, abstract=None, number=None,
            text_position_from=None, month=None, year=None, id=None,
            joint_authors=None, note=None, publisher=None,
            text_position_to=None, acronym=None, volume=None,
            title_normalized=None, pages=None, doi=None, title=None,
            submitted=None, to_appear=None):
        # attributes
        self.issn = None
        self.isbn = None
        self.type = None
        self.abstract = None
        self.number = None
        self.text_position_from = None
        self.month = None
        self.year = None
        self.presentation = None
        self.event = None
        self.joint_authors = None
        self.language = None
        self.note = None
        self.parent = None
        self.publisher = None
        self.text_position_to = None
        self.acronym = None
        self.volume = None
        self.title_normalized = None
        self.pages = None
        self.text = None
        self.series = None
        self.doi = None
        self.title = None
        self.submitted = None
        self.to_appear = None
        self.person = []
        self.project = []
        self.file = []
        self.tag = []
        self.rank = []
        self.organization_author = []
        self.url = []
        self.keyword = []
        self.topic = []
        self.reference = []
        self.reference_reference = []
        self.citation = []
        self.publication_section = []

        # dictionary of variable types
        self.__types__ = {'issn':basestring, 'isbn':basestring,
        'type':RRSPublication_type, 'abstract':basestring, 'number':int,
        'text_position_from':int, 'month':int, 'year':int, 'id':int,
        'presentation':RRSPresentation, 'event':RRSEvent, 'joint_authors':bool,
        'language':RRSLanguage, 'note':basestring, 'parent':RRSPublication,
        'publisher':RRSOrganization, 'text_position_to':int,
        'acronym':basestring, 'volume':int, 'title_normalized':basestring,
        'pages':basestring, 'text':RRSText, 'series':RRSPublication_series,
        'doi':basestring, 'title':basestring, 'submitted':bool,
        'to_appear':bool, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("issn", issn)
        self.set("isbn", isbn)
        self.set("abstract", abstract)
        self.set("number", number)
        self.set("text_position_from", text_position_from)
        self.set("month", month)
        self.set("year", year)
        self.set("id", id)
        self.set("joint_authors", joint_authors)
        self.set("note", note)
        self.set("publisher", publisher)
        self.set("text_position_to", text_position_to)
        self.set("acronym", acronym)
        self.set("volume", volume)
        self.set("title_normalized", title_normalized)
        self.set("pages", pages)
        self.set("doi", doi)
        self.set("title", title)
        self.set("submitted", submitted)
        self.set("to_appear", to_appear)


#-------------------------------------------------------------------------------
# End of class RRSPublication
#-------------------------------------------------------------------------------


class RRSRelationshipReferenceCitation(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_refe_cita"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSCitation, RRSReference)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipReferenceCitation
#-------------------------------------------------------------------------------


class RRSRelationshipPersonTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSTag)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonTag
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationKeyword(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_keyw"
    _fake_table = False

    def __init__(self, frequency=None):
        # attributes
        self.frequency = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSKeyword),
        'frequency':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("frequency", frequency)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationKeyword
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_pers"
    _fake_table = False

    def __init__(self, job_from=None, contact_id=None, job_to=None):
        # attributes
        self.job_from = None
        self.contact_id = None
        self.job_to = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSOrganization),
        'job_from':RRSDateTime, 'contact_id':int, 'job_to':RRSDateTime}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("job_from", job_from)
        self.set_attribute("contact_id", contact_id)
        self.set_attribute("job_to", job_to)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationPerson
#-------------------------------------------------------------------------------


class RRSRelationshipPersonPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_publ"
    _fake_table = False

    def __init__(self, author_rank=None, editor=None):
        # attributes
        self.author_rank = None
        self.editor = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSPublication),
        'author_rank':int, 'editor':bool}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("author_rank", author_rank)
        self.set_attribute("editor", editor)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonPublication
#-------------------------------------------------------------------------------


class RRSText(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "text"

    def __init__(self, content=None, length=None, id=None):
        # attributes
        self.content = None
        self.length = None
        self.file = None
        self.keyword = []
        self.publication = []
        self.publication_section = []

        # dictionary of variable types
        self.__types__ = {'content':basestring, 'length':int, 'id':int,
        'file':RRSFile, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("content", content)
        self.set("length", length)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSText
#-------------------------------------------------------------------------------


class RRSPresentation(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "presentation"

    def __init__(self, id=None, title=None):
        # attributes
        self.event = None
        self.title = None
        self.person_presents = []
        self.person_contributes = []
        self.url = []
        self.topic = []
        self.file = []
        self.tag = []
        self.publication = []

        # dictionary of variable types
        self.__types__ = {'event':RRSEvent, 'id':int, 'title':basestring,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSPresentation
#-------------------------------------------------------------------------------


class RRSRelationshipLocationRank(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_rank"
    _fake_table = False

    def __init__(self, citations_per_document=None, citation_count=None,
            h_index=None, document_count=None, rank=None,
            self_citation_count=None, citable_document_count=None):
        # attributes
        self.citations_per_document = None
        self.citation_count = None
        self.h_index = None
        self.document_count = None
        self.rank = None
        self.self_citation_count = None
        self.citable_document_count = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSLocation, RRSRank),
        'citations_per_document':float, 'citation_count':int, 'h_index':int,
        'document_count':int, 'rank':int, 'self_citation_count':int,
        'citable_document_count':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("citations_per_document", citations_per_document)
        self.set_attribute("citation_count", citation_count)
        self.set_attribute("h_index", h_index)
        self.set_attribute("document_count", document_count)
        self.set_attribute("rank", rank)
        self.set_attribute("self_citation_count", self_citation_count)
        self.set_attribute("citable_document_count", citable_document_count)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationRank
#-------------------------------------------------------------------------------


class RRSRelationshipEventUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSEvent)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventUrl
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationProjectOrganizes(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_proj_organizes"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSOrganization)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationProjectOrganizes
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationTag
#-------------------------------------------------------------------------------


class RRSRelationshipLanguagePublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_lang_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSLanguage)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLanguagePublication
#-------------------------------------------------------------------------------


class RRSRelationshipProjectUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_proj_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSUrl)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipProjectUrl
#-------------------------------------------------------------------------------


class RRSRelationshipKeywordTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_keyw_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSKeyword)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipKeywordTag
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationRank(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_rank"
    _fake_table = False

    def __init__(self, citation_count=None, h_index=None, document_count=None,
            citation_per_document=None, rank=None, reference_per_document=None,
            reference_count=None, citable_document_count=None):
        # attributes
        self.citation_count = None
        self.h_index = None
        self.document_count = None
        self.citation_per_document = None
        self.rank = None
        self.reference_per_document = None
        self.reference_count = None
        self.citable_document_count = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSRank),
        'citation_count':int, 'h_index':int, 'document_count':int,
        'citation_per_document':float, 'rank':int,
        'reference_per_document':float, 'reference_count':int,
        'citable_document_count':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("citation_count", citation_count)
        self.set_attribute("h_index", h_index)
        self.set_attribute("document_count", document_count)
        self.set_attribute("citation_per_document", citation_per_document)
        self.set_attribute("rank", rank)
        self.set_attribute("reference_per_document", reference_per_document)
        self.set_attribute("reference_count", reference_count)
        self.set_attribute("citable_document_count", citable_document_count)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationRank
#-------------------------------------------------------------------------------


class RRSRelationshipFileProject(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_proj"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFileProject
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationTopic(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_topi"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTopic, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationTopic
#-------------------------------------------------------------------------------


class RRSEvent_type(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "event_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSEvent_type
#-------------------------------------------------------------------------------


class RRSFile(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "file"

    def __init__(self, importname=None, hash=None, filename=None, type=None,
            id=None, size=None):
        # attributes
        self.importname = None
        self.hash = None
        self.filename = None
        self.type = None
        self.size = None
        self.tag = []
        self.publication = []
        self.project = []
        self.presentation = []
        self.text = []
        self.url = []

        # dictionary of variable types
        self.__types__ = {'importname':basestring, 'hash':basestring,
        'filename':basestring, 'type':basestring, 'id':int, 'size':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("importname", importname)
        self.set("hash", hash)
        self.set("filename", filename)
        self.set("type", type)
        self.set("id", id)
        self.set("size", size)


#-------------------------------------------------------------------------------
# End of class RRSFile
#-------------------------------------------------------------------------------


class RRSRelationshipTagUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_tag_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSTag)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipTagUrl
#-------------------------------------------------------------------------------


class RRSRelationshipFilePresentation(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_pres"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPresentation, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFilePresentation
#-------------------------------------------------------------------------------


class RRSRelationshipUrlRank(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_url_rank"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSRank)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipUrlRank
#-------------------------------------------------------------------------------


class RRSRelationshipPersonProjectResponsible(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_proj_responsible"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSPerson)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonProjectResponsible
#-------------------------------------------------------------------------------


class RRSKeyword(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "keyword"

    def __init__(self, id=None, title=None):
        # attributes
        self.title = None
        self.tag = []
        self.text = []
        self.topic = []
        self.project = []
        self.publication = []

        # dictionary of variable types
        self.__types__ = {'id':int, 'title':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSKeyword
#-------------------------------------------------------------------------------


class RRSRelationshipTextPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_text_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSText, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipTextPublication
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationProject(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_proj"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationProject
#-------------------------------------------------------------------------------


class RRSRelationshipPublication_sectionPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j__publ__publication_section"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication_section,
        RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublication_sectionPublication
#-------------------------------------------------------------------------------


class RRSAward(_RRSDatabaseEntity):
    """
    Award of person.
    """

    _table_name = "award"

    def __init__(self, id=None, name=None):
        # attributes
        self.name = None
        self.person = []

        # dictionary of variable types
        self.__types__ = {'id':int, 'name':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("name", name)


#-------------------------------------------------------------------------------
# End of class RRSAward
#-------------------------------------------------------------------------------


class RRSRelationshipPersonAward(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_awar"
    _fake_table = False

    def __init__(self, organization_id=None, awarded_date=None):
        # attributes
        self.organization_id = None
        self.awarded_date = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSAward),
        'organization_id':int, 'awarded_date':RRSDateTime}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("organization_id", organization_id)
        self.set_attribute("awarded_date", awarded_date)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonAward
#-------------------------------------------------------------------------------


class RRSEvent_name(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "event_name"

    def __init__(self, acronym=None, id=None, title=None):
        # attributes
        self.event = None
        self.acronym = None
        self.title = None

        # dictionary of variable types
        self.__types__ = {'event':RRSEvent, 'acronym':basestring, 'id':int,
        'title':basestring, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("acronym", acronym)
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSEvent_name
#-------------------------------------------------------------------------------


class RRSRelationshipKeywordTopic(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_keyw_topi"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTopic, RRSKeyword)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipKeywordTopic
#-------------------------------------------------------------------------------


class RRSGeoplanet(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "geoplanet"

    def __init__(self, admin1=None, woeid=None, admin2=None, name=None,
            country=None):
        # attributes
        self.admin1 = None
        self.woeid = None
        self.admin2 = None
        self.name = None
        self.country = None

        # dictionary of variable types
        self.__types__ = {'admin1':int, 'woeid':int, 'admin2':int,
        'name':basestring, 'country':basestring, 'module':basestring,
        'credibility':int}
        # set values
        self.set("admin1", admin1)
        self.set("woeid", woeid)
        self.set("admin2", admin2)
        self.set("name", name)
        self.set("country", country)


#-------------------------------------------------------------------------------
# End of class RRSGeoplanet
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationOrganization_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_orga"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization,
        RRSOrganization_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationOrganization_type
#-------------------------------------------------------------------------------


class RRSPublication_type(_RRSDatabaseEntity):
    """
    BibTex compatible?
    """

    _table_name = "publication_type"

    def __init__(self, type=None, id=None):
        # attributes
        self.type = None

        # dictionary of variable types
        self.__types__ = {'type':basestring, 'id':int, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("type", type)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSPublication_type
#-------------------------------------------------------------------------------


class RRSTopic(_RRSDatabaseEntity):
    """
    Topic tree.
    """

    _table_name = "topic"

    def __init__(self, id=None, title=None):
        # attributes
        self.parent = None
        self.title = None
        self.project = []
        self.keyword = []
        self.presentation = []
        self.person = []
        self.publication = []

        # dictionary of variable types
        self.__types__ = {'parent':RRSTopic, 'id':int, 'title':basestring,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSTopic
#-------------------------------------------------------------------------------


class RRSRelationshipOrganizationRank(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_orga_rank"
    _fake_table = False

    def __init__(self, citation_per_document=None, rank=None):
        # attributes
        self.citation_per_document = None
        self.rank = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSRank),
        'citation_per_document':float, 'rank':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("citation_per_document", citation_per_document)
        self.set_attribute("rank", rank)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipOrganizationRank
#-------------------------------------------------------------------------------


class RRSRank(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "rank"

    def __init__(self, year=None, id=None, name=None):
        # attributes
        self.url = None
        self.year = None
        self.name = None
        self.location = []
        self.publication = []
        self.organization = []

        # dictionary of variable types
        self.__types__ = {'url':RRSUrl, 'year':int, 'id':int, 'name':basestring,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("year", year)
        self.set("id", id)
        self.set("name", name)


#-------------------------------------------------------------------------------
# End of class RRSRank
#-------------------------------------------------------------------------------


class RRSPublication_series(_RRSDatabaseEntity):
    """
    Series of publications.
    """

    _table_name = "publication_series"

    def __init__(self, frequency=None, id=None, last_occurence=None,
            title=None):
        # attributes
        self.frequency = None
        self.last_occurence = None
        self.title = None

        # dictionary of variable types
        self.__types__ = {'frequency':int, 'id':int,
        'last_occurence':RRSDateTime, 'title':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("frequency", frequency)
        self.set("id", id)
        self.set("last_occurence", last_occurence)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSPublication_series
#-------------------------------------------------------------------------------


class RRSRelationshipNetworkPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_netw_pers"
    _fake_table = False

    def __init__(self, url_id=None):
        # attributes
        self.url_id = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSNetwork), 'url_id':int}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("url_id", url_id)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipNetworkPerson
#-------------------------------------------------------------------------------


class RRSRelationshipPresentationUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pres_url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSPresentation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPresentationUrl
#-------------------------------------------------------------------------------


class RRSRelationshipFileUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_url"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFileUrl
#-------------------------------------------------------------------------------


class RRSRelationshipPublication_sectionUrl(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j__publication_section__url"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSPublication_section)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublication_sectionUrl
#-------------------------------------------------------------------------------


class RRSPerson(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "person"

    def __init__(self, first_name=None, last_name=None, middle_name=None,
            full_name_ascii=None, sex=None, full_name_national=None,
            full_name=None, original=None, id=None):
        # attributes
        self.first_name = None
        self.last_name = None
        self.middle_name = None
        self.full_name_ascii = None
        self.sex = None
        self.full_name_national = None
        self.full_name = None
        self.original = None
        self.citation = []
        self.contact = []
        self.publication = []
        self.presentation_presents = []
        self.network = []
        self.organization = []
        self.presentation_contributes = []
        self.tag = []
        self.project_responsible = []
        self.url = []
        self.location = []
        self.reference = []
        self.project_works = []
        self.award = []
        self.topic = []
        self.person_name = []
        self.event = []

        # dictionary of variable types
        self.__types__ = {'first_name':basestring, 'last_name':basestring,
        'middle_name':basestring, 'full_name_ascii':basestring,
        'sex':basestring, 'full_name_national':basestring,
        'full_name':basestring, 'original':basestring, 'id':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("first_name", first_name)
        self.set("last_name", last_name)
        self.set("middle_name", middle_name)
        self.set("full_name_ascii", full_name_ascii)
        self.set("sex", sex)
        self.set("full_name_national", full_name_national)
        self.set("full_name", full_name)
        self.set("original", original)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSPerson
#-------------------------------------------------------------------------------


class RRSRelationshipEventEvent_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_even"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSEvent, RRSEvent_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventEvent_type
#-------------------------------------------------------------------------------


class RRSRelationshipLocationEvent(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_even"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSEvent, RRSLocation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationEvent
#-------------------------------------------------------------------------------


class RRSReference(_RRSDatabaseEntity):
    """
    Reference to publication (in other publication or source).
    """

    _table_name = "reference"

    def __init__(self, content=None, id=None):
        # attributes
        self.publication = None
        self.content = None
        self.source_url = None
        self.referenced_publication = None
        self.person = []
        self.citation = []
        self.person_name = []

        # dictionary of variable types
        self.__types__ = {'publication':RRSPublication, 'content':basestring,
        'source_url':RRSUrl, 'referenced_publication':RRSPublication, 'id':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("content", content)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSReference
#-------------------------------------------------------------------------------


class RRSRelationshipFilePublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_publ"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPublication, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFilePublication
#-------------------------------------------------------------------------------


class RRSRelationshipPersonProjectWorks(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_proj_works"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSProject, RRSPerson)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonProjectWorks
#-------------------------------------------------------------------------------


class RRSPublication_section(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "publication_section"

    def __init__(self, title=None, text_position_to=None, number=None,
            text_position_from=None, id=None):
        # attributes
        self.title = None
        self.publication = None
        self.text_position_to = None
        self.number = None
        self.text_position_from = None
        self.parent = None
        self.url = []
        self.text = None

        # dictionary of variable types
        self.__types__ = {'title':basestring, 'publication':RRSPublication,
        'text_position_to':int, 'number':int, 'text_position_from':int,
        'parent':RRSPublication_section, 'id':int, 'module':basestring,
        'credibility':int, 'text':RRSText}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("title", title)
        self.set("text_position_to", text_position_to)
        self.set("number", number)
        self.set("text_position_from", text_position_from)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSPublication_section
#-------------------------------------------------------------------------------


class RRSRelationshipPersonPresentationPresents(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_pres_presents"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSPresentation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonPresentationPresents
#-------------------------------------------------------------------------------


class RRSRelationshipCitationPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_citation_person"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSCitation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipCitationPerson
#-------------------------------------------------------------------------------


class RRSEvent(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "event"

    def __init__(self, start_timestamp=None, title=None, acronym=None,
            title_normalized=None, id=None, sequence_number=None,
            end_timestamp=None):
        # attributes
        self.start_timestamp = None
        self.title = None
        self.acronym = None
        self.type = None
        self.series = None
        self.parent = None
        self.title_normalized = None
        self.location = None
        self.sequence_number = None
        self.end_timestamp = None
        self.organization = []
        self.url = []
        self.tag = []
        self.person = []
        self.presentation = []
        self.event_name = []
        self.publication = []

        # dictionary of variable types
        self.__types__ = {'start_timestamp':RRSDateTime, 'title':basestring,
        'acronym':basestring, 'type':RRSEvent_type, 'series':RRSEvent_series,
        'parent':RRSEvent, 'title_normalized':basestring,
        'location':RRSLocation, 'id':int, 'sequence_number':int,
        'end_timestamp':RRSDateTime, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("start_timestamp", start_timestamp)
        self.set("title", title)
        self.set("acronym", acronym)
        self.set("title_normalized", title_normalized)
        self.set("id", id)
        self.set("sequence_number", sequence_number)
        self.set("end_timestamp", end_timestamp)


#-------------------------------------------------------------------------------
# End of class RRSEvent
#-------------------------------------------------------------------------------


class RRSRelationshipEventPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_even_pers"
    _fake_table = False

    def __init__(self, comitee=None):
        # attributes
        self.comitee = None

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSEvent), 'comitee':bool}

        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)

        # set values
        self.set_attribute("comitee", comitee)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipEventPerson
#-------------------------------------------------------------------------------


class RRSRelationshipUrlReference(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_url_refe"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSUrl, RRSReference)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipUrlReference
#-------------------------------------------------------------------------------


class RRSRelationshipPublicationOrganizationAuthor(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_publ_orga_author"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSOrganization, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPublicationOrganizationAuthor
#-------------------------------------------------------------------------------


class RRSRelationshipLocationTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTag, RRSLocation)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationTag
#-------------------------------------------------------------------------------


class RRSRelationshipPresentationPublication(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pres_publ"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPresentation, RRSPublication)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPresentationPublication
#-------------------------------------------------------------------------------


class RRSRelationshipCitationTag(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_cita_tag"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSCitation, RRSTag)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipCitationTag
#-------------------------------------------------------------------------------


class RRSRelationshipContactPerson(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_cont_pers"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSPerson, RRSContact)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipContactPerson
#-------------------------------------------------------------------------------


class RRSRelationshipFileText(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_file_text"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSText, RRSFile)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipFileText
#-------------------------------------------------------------------------------


class RRSRelationshipLocationLocation_type(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_loca_loca"
    _fake_table = True

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSLocation, RRSLocation_type)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipLocationLocation_type
#-------------------------------------------------------------------------------


class RRSUrl(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "url"

    def __init__(self, available=None, title=None, link=None, id=None):
        # attributes
        self.available = None
        self.title = None
        self.type = None
        self.link = None
        self.file = None
        self.organization = []
        self.event = []
        self.publication_section = []
        self.network = []
        self.project = []
        self.presentation = []
        self.publication = []
        self.person = []
        self.tag = []
        self.reference_source = []
        self.rank = []

        # dictionary of variable types
        self.__types__ = {'available':bool, 'title':basestring,
        'type':RRSUrl_type, 'link':basestring, 'file':RRSFile, 'id':int,
        'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("available", available)
        self.set("title", title)
        self.set("link", link)
        self.set("id", id)


#-------------------------------------------------------------------------------
# End of class RRSUrl
#-------------------------------------------------------------------------------


class RRSOrganization_name(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "organization_name"

    def __init__(self, acronym=None, id=None, title=None):
        # attributes
        self.acronym = None
        self.organization = None
        self.title = None

        # dictionary of variable types
        self.__types__ = {'acronym':basestring, 'organization':RRSOrganization,
        'id':int, 'title':basestring, 'module':basestring, 'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("acronym", acronym)
        self.set("id", id)
        self.set("title", title)


#-------------------------------------------------------------------------------
# End of class RRSOrganization_name
#-------------------------------------------------------------------------------


class RRSRelationshipPersonTopic(_RRSDbEntityRelationship):
    """
    No comment available.
    """

    _table_name = "j_pers_topi"
    _fake_table = False

    def __init__(self):

        # dictionary of variable types
        self.__types__ = {'__entities__':(RRSTopic, RRSPerson)}
        # call constructor of ancestor
        _RRSDbEntityRelationship.__init__(self)


#-------------------------------------------------------------------------------
# End of class RRSRelationshipPersonTopic
#-------------------------------------------------------------------------------


class RRSLanguage(_RRSDatabaseEntity):
    """
    No comment available.
    """

    _table_name = "language"

    def __init__(self, id=None, name=None):
        # attributes
        self.name = None
        self.publication = []

        # dictionary of variable types
        self.__types__ = {'id':int, 'name':basestring, 'module':basestring,
        'credibility':int}

        # call constructor of ancestor
        _RRSDatabaseEntity.__init__(self, id)

        # set values
        self.set("id", id)
        self.set("name", name)


#-------------------------------------------------------------------------------
# End of class RRSLanguage
#-------------------------------------------------------------------------------

class RRSTypeEnumeration(list): pass

publication_types = RRSTypeEnumeration(['article', 'book', 'booklet', 'conference',
                                        'inbook', 'incollection', 'inproceedings',
                                        'manual', 'mastersthesis', 'misc', 'unpublished',
                                        'phdthesis', 'proceedings', 'techreport'])

event_types = RRSTypeEnumeration(['award', 'ceremony', 'competition', 'concert',
                                  'conference', 'convention', 'course', 'defense',
                                  'discussion', 'exhibition', 'fair', 'forum',
                                  'launch', 'lecture', 'meeting', 'misc', 'open day',
                                  'screening', 'seminar', 'social', 'symposium',
                                  'webinar', 'workshop'])
